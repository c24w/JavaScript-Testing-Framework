Only TDD chrome extension I could find: https://github.com/testdouble/in-my-words

Loading js files asynchronously:
if loaded, execute callback
else if loading, retry in timeout
else append to head

issues: tests running in a random order when multiple test files referenced, due to varying load/callback speeds

HTML code marking can use `word` to monospace the word - not bulletproof, e.g. `code`notcode`code` will highlight all as code

add test body to tooltip or something

careful between assert.instance and assert.type - primitives don't work with instance, e.g. 1 instanceof Number is false, unless using the constructor, i.e. new Number(1) instance of Number, although assert.not.instance(new String(), String); seems to work in demo test
"If you're dealing with literal notation, and not constructors, you can use typeof:."
improved assert.instance to accomodate for primitives

fix code marking / formatting with ``

invert expanded

crank load retry interval to 0ms and the fixtures load in random orders and sometimes bug!

load in a particular order:

loadResource(a, function(){
	loadResource(b, function(){
		loadResource(c, finishedCallback);
	});
});

or:

loadSpecificResource(function(){
	loadOtherSpecificResource(function(){
		loadOtherResource(finishedCallback);
	});
});

Assert.type case-sensitive, e.g. Assert.type(1, 'Number') fails; Assert.type(1, 'number') passes

if test name is whitespace, doesn't display in html properly

Assert.that... no custom message option

Stuff I added
-------------
add option to 'collapse' in console output - did I?

cannot rely on !(A instanceof B) for primitives because !('hello' instanceof String) returns false!

Known issues
------------
when Assert.that(subject).is.true() fails, message refers to Assert.true(subject) (etc)

Assert instance checks no longer using toString.call() with regex to extract type and still works for primitives.

if setup fails, test should fail
admin page? launch all tests; stop all tests

handle errors in html
assert instance of collection
remove sugary assert tests? just test that they delegate correctly - switch in mock assert then switch back
Assert undefined
greater equal etc
check assert condition / other args for undefined