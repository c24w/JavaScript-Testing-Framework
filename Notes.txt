Only TDD chrome extension I could find: https://github.com/testdouble/in-my-words

Loading js files asynchronously:
if loaded, execute callback
else if loading, retry in timeout
else append to head

issues: tests running in a random order when multiple test files referenced, due to varying load/callback speeds

HTML code marking can use `word` to monospace the word - not bulletproof, e.g. `code`notcode`code` will highlight all as code

add test body to tooltip or something

careful between assert.instance and assert.type - primitives don't work with instance, e.g. 1 instanceof Number is false, unless using the constructor, i.e. new Number(1) instance of Number, although assert.not.instance(new String(), String); seems to work in demo test
"If you're dealing with literal notation, and not constructors, you can use typeof:."
improved assert.instance to accomodate for primitives

fix code marking / formatting with ``

invert expanded

crank load retry interval to 0ms and the fixtures load in random orders and sometimes bug!

load in a particular order:

loadResource(a, function(){
	loadResource(b, function(){
		loadResource(c, finishedCallback);
	});
});

or:

loadSpecificResource(function(){
	loadOtherSpecificResource(function(){
		loadOtherResource(finishedCallback);
	});
});

Assert.type case-sensitive, e.g. Assert.type(1, 'Number') fails; Assert.type(1, 'number') passes

if test name is whitespace, doesn't display in html properly

Assert.that... no custom message option

Stuff I added
-------------
add option to 'collapse' in console output - did I?

cannot rely on !(A instanceof B) for primitives because !('hello' instanceof String) returns false!

Known issues
------------
when Assert.that(subject).is.true() fails, message refers to Assert.true(subject) (etc)

Assert instance checks no longer using toString.call() with regex to extract type and still works for primitives.

if setup fails, test should fail
admin page? launch all tests; stop all tests

handle errors in html
assert instance of collection
remove sugary assert tests? just test that they delegate correctly - switch in mock assert then switch back
Assert undefined
greater equal etc
check assert condition / other args for undefined
doc testErrors
extract actual and expected inside AssertException
yellow favicon
handle both types of setup errors
html-tools hasClass add/removeClass

break into sub-projects
 - assert
 - loadResources
 - html tools
 - namespacing
 - cachebuster

 ---


 Look at implementations in t-c-f.js. E.g. class.name is not part of the ES standard, maybe use Object.prototype.toString


 -----------------------------------------


# Just a bunch of thoughts and things I had related to this project

var asyncTestKey, asyncArgPassed;

asyncTestRunning = ( return asyncArgPassed !== null )

for i = 0 in tests.keys
    if not asyncTestRunning
        test[keys[i]] ( asyncArgPassed if required )

    if asyncTestRunning and asyncArgPassed.done
        asyncArgPassed = null

    if asyncTestRunning and asyncArgPassed.timeout has expired
        throw 'async timeout expired'

    if asyncTestRunning and not asyncArgPassed.done
        make sure i is not incremented so the loop hangs while the aysnc test runs

---

function assert(condition){}

assert.throws = function(func){}

usage:

assert(true)

assert.throws(function({})

---

for a in b
should be for var a in b

--

delete obj.prop returns boolean success - throw if fails in test runner?

---

don't to update partial config, just overwrite default config

var completeConfig= {}, userConfig = {};

for prop in userConfig
    completeConfig[prop] = userConfig[prop]

then use completeConfig

---

Add async attr to load resource - may as well load in parallel!
test performance difference

---

use if('prop' in obj) because explicitly returns a boolean, not implicitly by whether a value is present or undefined. Also eliminates ambiguity if prop is a bool

---

want:
assert(bool)
may not be able to do this one because assert(1 === 1) and assert(1 === 1).is.not null would conflict (see below).

assert.something(args)
assert.equal(sth, sthelse)
 -> static props on assert

assert(sth).somethings
assert(func).throws(sth)
assert(sth).is.equiv.to(sthelse)
 -> use assert constructor

assert(sth).is.not.null;
 -> Object.defineProperty(assert, 'null', {
        get: function () { ... }
    });


starting point:

works with
  assert.equal(subject, target)
  assert(subject).equals(target)
  assert.null(subject)
  assert(subject).is(target) - same as equal
  assert(subject).is.null

function is(target) {
  return assert.equal(this.subject, target);
};

function assert(subject){
  if (!(this instanceof arguments.callee))
    return new arguments.callee(subject);

  this.subject = subject;
  this.is = assert.equal.bind(this, subject);
  
  Object.defineProperties(this.is, {
    null: {
      get: function _null() {
        return assert.null(subject);
      }
    }
  });
}

assert.equal = function equal(a,b) {
  return a === b;
};

assert.null= function equal(subject) {
  return assert.equal(subject, null);
};

//assert.prototype.equals = function equals(sth){
//  return assert.equal(this.subject, sth);
//}

---
Console
console.log('%c Blah ', 'background: #222; color: #bada55');

GROUP
console.group
console.time
etc
https://developers.google.com/chrome-developer-tools/docs/console#using_the_console_api

